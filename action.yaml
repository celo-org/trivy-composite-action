name: Trivy
description: "Run a Trivy Scan and upload the results"
inputs:
  app:
    description: "app name for report"
    required: true
    type: string
  image-ref:
    description: "image to scan"
    required: false
    type: string
  scan-type:
    description: "type of scan"
    required: true
    type: string
  timeout:
    description: "how long to scan"
    default: 15m
    type: string
  vuln-type:
    description: "types of vulnerabilities to report"
    default: "os,library"
    type: string
  severity:
    description: "severity of issues to report"
    default: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
    type: string
  output-file:
    description: "outputfile, this is used mostly as a run level variable since not supported in composite actions"
    default: "trivy"
  summary:
    description: "enable summary output"
    default: true

runs:
  using: "composite"
  steps:
    - name: Validate Inputs
      shell: bash
      if: ${{ inputs.scan-type == 'image' && inputs.image-ref == '' }}
      run: |
        echo "::error::scan-type of image requires image-ref"
        exit 1

    - name: Run Trivy vulnerability scanner
      id: scan
      uses: aquasecurity/trivy-action@master
      with:         
        scan-type: "${{ inputs.scan-type }}"
        image-ref: "${{ inputs.image-ref }}"
        timeout: "${{ inputs.timeout }}"
        vuln-type: "${{ inputs.vuln-type }}"
        severity: "${{ inputs.severity }}"
        format: "json"
        output: "${{ inputs.output-file }}.json"

    - name: Strip image name only
      # This is for a cleaner artifact name of the trivy report only.
      id: strip
      if: ${{ inputs.scan-type == 'image' }}
      env:
        IMAGE_REF: ${{ inputs.image-ref }}
      shell: bash
      run: |
        basename=${IMAGE_REF##*/}
        stripped=${basename%:*}
        echo "stripped_file=$stripped" >> $GITHUB_OUTPUT

    - name: Upload json report as artifact
      id: upload-json
      uses: actions/upload-artifact@v4
      with:
        name: "${{ steps.strip.outputs.stripped_file }}-trivy"
        path: ${{ env.TRIVY_OUTPUT }}
       

    - name: Convert output to text for github summary
      if: inputs.summary
      env:
        OUTPUT-FILE: "${{ inputs.output-file }}.txt"
      id: convert-text
      shell: bash
      run: |
        trivy convert --format table  --output ${{ env.OUTPUT-FILE }} ${{ env.TRIVY_OUTPUT }}
        echo "text-file=${{ env.OUTPUT-FILE }}" >> $GITHUB_OUTPUT

    - name: Build Report
      id: build-report
      shell: bash
      env:
        TRIVY-TEXT-FILE: "${{ inputs.output-file }}.txt"
        ACTOR: ${{ github.actor }}
        EVENT-NAME: ${{ github.event_name }}
        WORKFLOW: ${{ github.workflow }}
        REPO: ${{ github.repository }}
        RUN-ID: ${{ github.run_id }}
        SCAN-TYPE: ${{ inputs.scan-type }}
      run: |
        if [[ -s ${{ env.TRIVY-TEXT-FILE }} ]]; then
        {
          echo "### Trivy Scan Output"
          echo "<details><summary>Click to expand</summary>"
          echo ""
          echo '```scan-type ${{ env.SCAN-TYPE }}'
          cat ${{ env.TRIVY-TEXT-FILE }}
          echo '```'
          echo "</details>"

          echo "*Pusher: @${{ env.ACTOR }}*"
          echo "*Action: ${{ env.EVENT-NAME }}*"
          echo "*Working Directory: ${{ env.WORKDIR }}*"
          echo" *Workflow: ${{ env.WORKFLOW }}*"
          echo "*Execution link: https://github.com/${{ env.REPO }}/actions/runs/${{ env.RUN-ID }}*"

        } >> report.txt
        echo "report=report.txt" >> $GITHUB_OUTPUT     
        fi

    - name: Post Scan Results to GitHub PR
      uses: mshick/add-pr-comment@b8f338c590a895d50bcbfa6c5859251edc8952fc # v2
      if: github.event_name == 'pull_request'
      with:
        allow-repeats: true
        repo-token: ${{ github.token }}
        message-id: Trivy Scan ${{ github.workflow }}
        message-path: ${{ steps.build-report.outputs.report }}
#        message: |
#          Trivy scan for ${{ github.workflow }}
#
#          ${{ steps.convert-text.output.text-file }}
#
#          *Pusher: @${{ github.actor }}*
#          *Action: ${{ github.event_name }}*
#          *Working Directory: ${{ env.WORKDIR }}*
#          *Workflow: ${{ github.workflow }}*
#          *Execution link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}*
#

    - name: Post Scan Results to Workflow Summary
      if: ${{ inputs.summary }}
      shell: bash
      run: |
        cat ${{ steps.build-report.outputs.report }} >> $GITHUB_STEP_SUMMARY
#      env:
#        OUTPUT-FILE: "${{ inputs.output-file }}.txt"
#      run: |
#        if [[ -s ${{ env.OUTPUT-FILE }} ]]; then
#        {
#          echo "### Trivy Scan Output"
#          echo "<details><summary>Click to expand</summary>"
#          echo ""
#          echo '```scan-type ${{ inputs.scan-type }}'
#          cat ${{ env.OUTPUT-FILE }}
#          echo '```'
#          echo "</details>"
#
#        } >> $GITHUB_STEP_SUMMARY
#        fi

    - name: Check if GHAS is enabled
      uses: actions/github-script@v7
      id: ghas-enabled
      with:
        script: |
          const response = await github.rest.repos.get({
            owner: '${{ github.repository }}'.split("/")[0],
            repo: '${{ github.repository }}'.split("/")[1]
          });
          const private = response.data.private
          
          if (private) {
            const securityEnabled = response.data.security_and_analysis?.advanced_security?.status === 'enabled';
 
            if (!securityEnabled) {
              const message = 'GitHub Advanced Security is NOT enabled and repo is private. Can not upload report, check summary';
              core.warning(message);
              return false
            }
          }
          return true

    - name: Convert output to Sarif for codescanning
      env:
        OUTPUT-FILE: ${{ inputs.output-file }}
      if: steps.ghas-enabled.output.result
      id: convert-sarif
      shell: bash
      run: |
        trivy convert --format sarif --output ${{ env.OUTPUT-FILE }}.sarif ${{ env.TRIVY_JSON }}
        echo "sarif-file=${{ env.OUTPUT-FILE }}.sarif" >> $GITHUB_OUTPUT
    
    - name: Upload Trivy scan results to GitHub Security tab
      if: steps.ghas-enabled.output.result
      id: upload
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ${{ steps.convert-sarif.outputs.sarif-file }}

